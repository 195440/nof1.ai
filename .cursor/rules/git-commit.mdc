---
alwaysApply: true
description: Git 提交规范 - 所有提交信息必须使用中文
---

# Git 提交规范

## 基本格式

```
<类型>[可选 范围]: <描述>

[可选 正文]

[可选 脚注]
```

## 提交类型

所有提交信息必须使用**中文**描述，以下是标准的提交类型：

### 主要类型

- **fix**: 修复代码中的 bug（对应语义化版本中的 PATCH）
  - 示例：`fix: 修复用户登录时的会话过期问题`
  - 示例：`fix(api): 修复数据查询返回空值的错误`

- **feat**: 添加新功能（对应语义化版本中的 MINOR）
  - 示例：`feat: 添加用户头像上传功能`
  - 示例：`feat(dashboard): 新增数据可视化图表组件`

- **BREAKING CHANGE**: 引入破坏性 API 变更（对应语义化版本中的 MAJOR）
  - 在脚注中使用 `BREAKING CHANGE: <描述>`
  - 或在类型后添加 `!`，例如：`feat!: 重构用户认证系统`

### 其他类型

- **build**: 修改项目构建系统
  - 示例：`build: 升级 Node 版本到 20.x`
  - 示例：`build: 更新依赖库版本`

- **chore**: 修改非业务性代码
  - 示例：`chore: 更新构建脚本配置`
  - 示例：`chore: 清理无用的代码注释`

- **ci**: 修改持续集成流程
  - 示例：`ci: 更新 GitHub Actions 工作流`
  - 示例：`ci: 添加自动部署配置`

- **docs**: 修改文档
  - 示例：`docs: 更新 API 使用说明`
  - 示例：`docs: 完善 README 安装步骤`

- **style**: 修改代码样式（不影响功能）
  - 示例：`style: 统一代码缩进格式`
  - 示例：`style: 调整组件布局间距`

- **refactor**: 重构代码（不修改功能逻辑）
  - 示例：`refactor: 优化数据处理函数结构`
  - 示例：`refactor(auth): 重命名认证相关变量名`

- **perf**: 性能优化
  - 示例：`perf: 优化列表渲染性能`
  - 示例：`perf: 减少数据库查询次数`

- **test**: 修改测试用例
  - 示例：`test: 添加用户注册功能测试`
  - 示例：`test: 修复单元测试失败问题`

## 范围（可选）

可以在类型后添加范围来提供额外的上下文信息，用圆括号包围：

```
feat(解析器): 添加数组解析能力
fix(用户模块): 修复密码重置逻辑错误
```

## 完整示例

### 简单提交
```
feat: 添加用户注册功能
```

### 带范围的提交
```
fix(登录): 修复验证码过期时间计算错误
```

### 带正文的提交
```
feat: 添加数据导出功能

用户现在可以将数据导出为 CSV 或 Excel 格式。
导出功能支持选择日期范围和数据字段。
```

### 破坏性变更
```
feat!: 重构 API 认证机制

BREAKING CHANGE: 旧的 Token 认证方式已被移除，所有 API 调用现在必须使用 OAuth 2.0 认证。
```

## 重要提示

1. **必须使用中文**：所有描述、正文和脚注都必须使用中文
2. **类型使用英文**：提交类型关键字（如 `feat`、`fix`）保持英文
3. **描述要简洁明了**：一句话说明改动内容
4. **首字母无需大写**：中文描述自然书写
5. **使用冒号分隔**：类型和描述之间使用英文冒号+空格分隔
